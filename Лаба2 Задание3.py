print("Использовать библиотеку NumPy - введите '1'\n", "Не использовать - введите '2'")
q = int(input())
if q == 1:
    import numpy as np

    print("Введите элементы матрицы 3x3 (нажмите [enter] после каждого введенного значения):")
    A = np.array([[int(input()), int(input()), int(input())], [int(input()), int(input()), int(input())],
                  [int(input()), int(input()), int(input())]])
    if np.linalg.det(A) == 0:
        print("Обратной матрицы не существует, так как определитель равен нулю")
    else:
        print("Обратная матрица:")
        print(np.linalg.inv(A))
elif q == 2:
    print("Введите элементы матрицы 3x3 (нажмите [enter] после каждого введенного значения):")
    A = [[int(input()), int(input()), int(input())], [int(input()),  int(input()), int(input())], [int(input()), int(input()), int(input())]]
    det_A = A[0][0] * A[1][1] * A[2][2] + A[1][0] * A[2][1] * A[0][2] + A[2][0] * A[0][1] * A[1][2] - A[0][2] * A[1][1] * \
              A[2][0] - A[1][2] * A[2][1] * A[0][0] - A[2][2] * A[0][1] * A[1][0]
    if det_A == 0:
        print("Обратной матрицы не существует, так как определитель равен нулю")
    else:
        AT = [[0 for i in range(3)] for j in range(3)]
        AT[0][0] = (1 / det_A) * (A[1][1] * A[2][2] - A[1][2] * A[2][1])
        AT[1][1] = (1 / det_A) * (A[0][0] * A[2][2] - A[0][2] * A[2][0])
        AT[2][2] = (1 / det_A) * (A[0][0] * A[1][1] - A[0][1] * A[1][0])
        AT[1][0] = (1 / det_A) * ((-1) * (A[1][0] * A[2][2] - A[2][0] * A[1][2]))
        AT[0][1] = (1 / det_A) * ((-1) * (A[0][1] * A[2][2] - A[2][1] * A[0][2]))
        AT[2][0] = (1 / det_A) * (A[1][0] * A[2][1] - A[2][0] * A[1][1])
        AT[0][2] = (1 / det_A) * (A[0][1] * A[1][2] - A[1][1] * A[0][2])
        AT[2][1] = (1 / det_A) * ((-1) * (A[0][0] * A[2][1] - A[0][1] * A[2][0]))
        AT[1][2] = (1 / det_A) * ((-1) * (A[0][0] * A[1][2] - A[1][0] * A[0][2]))
        print("Обратная матрица: ")
        print(AT[0])
        print(AT[1])
        print(AT[2])


